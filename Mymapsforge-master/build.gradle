buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

def filterProjects(filter) {
    return subprojects.findAll { project -> filter.contains(project.name) }
}

allprojects {
    group = 'org.mapsforge'
    version = 'master-SNAPSHOT'
    ext.androidBuildVersionTools = "23.0.2"
    ext.jUnitVersion = "4.11"
    description = """The mapsforge project provides free and open software for OpenStreetMap-based applications."""
}

// no injection of functions, so via inheritance
def androidCompileSdk() { return 23 }

def androidMinSdk() { return 10 }

// this is the last SDK with the old permissions system, so this should not change in the future
def androidTargetSdkOldPermissions() { return 22 }

// moving forward we will target the latest SDK (that will all have the new permissions system)
def androidTargetSdkRuntimePermissions() { return androidCompileSdk() }

def versionCode() { return 60 }

def versionName() { return version }

// Configuration injection for all subprojects

subprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'eclipse'
}

// Configuration for all plain Java projects

project.ext.javaprojects = ["mapsforge-core", "mapsforge-map-reader", "mapsforge-map", "mapsforge-map-awt", "mapsforge-map-writer", "SwingMapViewer"]

configure(filterProjects(project.javaprojects)) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'maven'

    dependencies {
        testCompile group: 'junit', name: 'junit', version: "$jUnitVersion"
    }

    checkstyle {
        showViolations = false  // turn on for reporting
        // as of Gradle 2.2.1 every sub project seems to require a checkstyle file, this
        // directive forces all projects to use the shared file in the root project
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    // set java source encoding, otherwise some tests fail
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

// Configuration for Android projects
project.ext.androidlibraryprojects = ["mapsforge-map-android", "mapsforge-map-android-extras"]
project.ext.androidapkprojects = ["Samples"]
project.ext.androidprojects = project.androidlibraryprojects + project.androidapkprojects

// TODO get checkstyle and pmd working for android (right now it does not work out of the box, so better wait for official fix)

configure(filterProjects(project.androidapkprojects)) {
    apply plugin: 'com.android.application'

    android {
        productFlavors {
            oldpermissions {
                targetSdkVersion androidTargetSdkOldPermissions()
            }
            runtimepermissions {
                targetSdkVersion androidTargetSdkRuntimePermissions()
            }
        }
    }
}

configure(filterProjects(project.androidlibraryprojects)) {
    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android.libraryVariants.all { variant ->
        def name = variant.buildType.name
        if (name.equals("debug")) {
            print "Skipping debug jar"
            return; // Skip debug builds.
        }
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        artifacts.add('archives', task);
    }
}

configure(filterProjects(project.androidprojects)) {

    android {
        compileSdkVersion androidCompileSdk()
        buildToolsVersion "$androidBuildVersionTools"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        defaultConfig {
            versionCode versionCode()
            versionName versionName()
            minSdkVersion androidMinSdk()
        }

        sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                resources.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
            }
        }
    }
} 
